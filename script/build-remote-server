#!/usr/bin/env node

const { execFileSync } = require("child_process")
const fs = require('fs')
const { gzipSync } = require('zlib')

let osName
let rustOs
switch (process.platform) {
  case 'darwin':
    osName = 'macos'
    rustOs = 'apple-darwin'
    break
  case 'linux':
    osName = 'linux'
    rustOs = 'unknown-linux-gnu'
    break
  default:
    throw new Error(`Unsupported platform: ${process.platform}`)
}

const architectures = process.argv.slice(2);
if (architectures.length === 0) {
  console.error('Provide architectures as command line arguments.');
  process.exit(1);
}

for (const arch of architectures) {
  const rustTarget = `${arch}-${rustOs}`
  const binaryName = "remote_server"
  const gzipPath = `target/release/${"zed-remote-server"}-${osName}-${arch}.gz`
  const binaryPath = `target/${rustTarget}/release/${binaryName}`

  console.log("building", binaryPath, "...")
  run("cargo", ["build", "--release", "--package", "remote_server", "--bin", binaryName, "--target", rustTarget])
  run("strip", [binaryPath])

  console.log("creating", gzipPath)

  const inputBuffer = fs.readFileSync(binaryPath)
  const compressedBuffer = gzipSync(inputBuffer, { level: 9 })
  fs.writeFileSync(gzipPath, compressedBuffer)
}

function run(command, args) {
  execFileSync(command, args, {stdio: 'inherit'})
}
